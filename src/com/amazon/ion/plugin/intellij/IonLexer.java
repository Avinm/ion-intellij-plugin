/* The following code was generated by JFlex 1.4.3 on 5/26/16 11:37 AM */

/*
 * Copyright 2015-[2016] Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

package com.amazon.ion.plugin.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.amazon.ion.plugin.intellij.psi.IonTypes;
import com.intellij.psi.TokenType;

import static com.amazon.ion.plugin.intellij.helpers.ContentCorrectnessHelper.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/26/16 11:37 AM from the specification file
 * <tt>/home/local/ANT/kumbharr/workplace/intellij-ion-plugin/src/com/amazon/ion/plugin/intellij/Ion.flex</tt>
 */
public class IonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int READ_KEY = 8;
  public static final int READ_Q_STR = 18;
  public static final int READ_VALUE = 6;
  public static final int READ_QQ_STR = 16;
  public static final int YYINITIAL = 0;
  public static final int READ_QQQ_STR = 14;
  public static final int ION_LIST = 2;
  public static final int S_EXP = 10;
  public static final int ION_STRUCT = 4;
  public static final int READ_LOB = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\7\0\1\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3"+
    "\1\30\1\65\1\30\1\27\1\30\1\26\1\64\1\15\1\16\1\5"+
    "\1\20\1\10\1\21\1\31\1\4\1\55\1\61\10\7\1\17\1\30"+
    "\1\23\1\22\1\24\1\30\1\30\3\56\1\57\1\60\1\56\15\62"+
    "\1\66\1\62\4\62\1\67\1\13\1\63\1\14\1\30\1\6\1\30"+
    "\1\37\1\43\1\47\1\46\1\35\1\36\1\52\1\62\1\45\2\62"+
    "\1\40\1\50\1\42\1\44\1\51\1\62\1\33\1\41\1\32\1\34"+
    "\1\62\1\62\1\54\1\53\1\62\1\11\1\25\1\12\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\3\1\3\3\1\4\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\14\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\1\3\21\1\22\1\26\1\27"+
    "\2\14\1\30\1\31\2\32\1\33\10\32\2\34\1\1"+
    "\2\34\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\3\1\3\3\1\4\1\11\1\12\2\35\1\36"+
    "\2\37\1\40\1\41\1\0\1\4\1\42\1\0\1\42"+
    "\1\43\1\44\1\0\2\4\4\3\3\0\1\45\1\14"+
    "\1\0\1\22\1\46\1\0\1\46\1\47\1\0\2\22"+
    "\4\21\2\0\1\14\1\0\4\34\1\50\1\34\2\0"+
    "\1\4\1\42\1\0\1\42\1\43\1\44\1\0\2\4"+
    "\4\3\3\0\2\41\2\0\1\4\2\42\1\0\1\42"+
    "\1\0\3\3\1\42\1\51\1\52\1\53\1\14\1\54"+
    "\1\22\2\46\1\0\1\46\1\0\3\21\1\46\1\55"+
    "\1\56\1\14\1\57\5\34\1\0\1\4\2\42\1\0"+
    "\1\42\1\0\3\3\1\42\1\51\1\52\1\60\1\0"+
    "\1\41\1\4\1\0\1\42\1\61\1\62\1\14\1\22"+
    "\1\0\1\46\1\63\1\64\1\14\2\34\1\65\1\4"+
    "\1\0\1\42\1\61\1\62\1\65\1\0\1\66\2\0"+
    "\1\67\1\0\2\14\2\34\1\0\1\66\1\0\1\65"+
    "\26\0\2\14\1\34\45\0\2\14\1\34\26\0\1\62"+
    "\12\0\1\64\1\0\1\14\11\0\1\62\15\0\1\14"+
    "\6\0\2\66\3\0\2\67\3\0\1\14\2\66\5\0"+
    "\1\66\3\0\1\67\3\0\1\66\12\0\1\66\1\0"+
    "\1\67\1\0\1\66\7\0\1\66\1\0\1\67\1\0"+
    "\1\66\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0230"+
    "\0\u0348\0\u0230\0\u0230\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0230\0\u0230\0\u0540\0\u0230\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0230\0\u0620\0\u0658\0\u0690\0\u0230\0\u0230"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0230"+
    "\0\u0850\0\u0888\0\u08c0\0\u0230\0\u02a0\0\u0230\0\u0230\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u02d8\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0b98\0\u0c78\0\u0b98\0\u0b98\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0b98\0\u0e70\0\u0ea8\0\u0230"+
    "\0\u0ee0\0\u0f18\0\u0508\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u0230\0\u0230\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u0230\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u0230\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0230\0\u1768\0\u0b98\0\u17a0"+
    "\0\u17d8\0\u1810\0\u1848\0\u1880\0\u0b98\0\u0b98\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u0230\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u02d8\0\u1228\0\u1260"+
    "\0\u0230\0\u1d88\0\u0230\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u0620\0\u15a8\0\u0230\0\u1fb8"+
    "\0\u0230\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u0c08\0\u1a40\0\u1a78\0\u2338\0\u2370\0\u1b20\0\u23a8\0\u1c00"+
    "\0\u0230\0\u02d8\0\u23e0\0\u2418\0\u2450\0\u1e30\0\u0230\0\u0620"+
    "\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2338\0\u2568\0\u21b0\0\u0b98"+
    "\0\u0c08\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u0230\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678"+
    "\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8"+
    "\0\u0230\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40"+
    "\0\u3d78\0\u3db0\0\u3de8\0\u0230\0\u3e20\0\u3e58\0\u3e90\0\u3ec8"+
    "\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u0b98"+
    "\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210"+
    "\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0"+
    "\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590"+
    "\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750"+
    "\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u0230\0\u48d8"+
    "\0\u4910\0\u4948\0\u0230\0\u4980\0\u49b8\0\u49f0\0\u0b98\0\u4a28"+
    "\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8"+
    "\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8"+
    "\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68"+
    "\0\u4fa0\0\u4fd8\0\u5010";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\3\14\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\13\1\22\1\13\1\23\1\13\1\24\1\25\1\26"+
    "\5\13\1\16\2\13\1\27\3\16\1\30\3\16\1\31"+
    "\12\16\1\32\3\16\1\17\1\16\1\13\1\33\1\34"+
    "\2\16\1\13\3\14\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\13\1\22\1\35\1\23\1\13\1\24\1\25"+
    "\1\26\5\13\1\16\2\13\1\27\3\16\1\30\3\16"+
    "\1\31\12\16\1\32\3\16\1\17\1\16\1\13\1\33"+
    "\1\34\2\16\1\13\3\14\1\15\1\13\1\36\1\17"+
    "\1\20\1\21\1\37\1\22\1\13\1\23\1\13\1\40"+
    "\1\25\1\26\5\13\1\36\2\13\10\36\1\41\12\36"+
    "\1\32\3\36\1\17\1\36\1\13\1\42\1\43\2\36"+
    "\1\13\3\14\2\13\1\44\1\45\1\20\1\46\1\13"+
    "\1\47\1\13\1\50\1\13\1\24\1\51\1\52\5\13"+
    "\1\44\2\13\1\53\3\44\1\54\3\44\1\55\12\44"+
    "\1\56\3\44\1\45\1\44\1\13\1\57\1\60\2\44"+
    "\1\61\3\14\3\61\1\62\7\61\1\24\35\61\1\62"+
    "\3\61\1\62\1\61\1\13\1\63\1\64\2\61\1\13"+
    "\3\14\1\65\1\66\1\16\1\17\1\20\1\21\1\13"+
    "\1\22\1\13\1\23\1\67\1\24\1\70\1\71\1\66"+
    "\1\72\1\73\1\74\1\75\1\76\1\66\1\77\1\27"+
    "\3\16\1\30\3\16\1\31\12\16\1\32\3\16\1\17"+
    "\1\16\1\13\1\33\1\34\2\16\1\13\3\14\1\100"+
    "\1\13\1\16\1\101\1\20\1\21\1\102\1\22\1\13"+
    "\1\23\1\13\1\24\1\100\1\26\5\13\1\16\2\13"+
    "\10\103\1\104\12\103\1\101\3\103\1\101\1\103\1\13"+
    "\1\33\1\34\2\103\1\105\3\106\2\105\1\107\1\110"+
    "\1\111\1\112\1\105\1\113\1\105\1\114\1\105\1\115"+
    "\1\116\1\117\5\105\1\107\2\105\1\120\3\107\1\121"+
    "\3\107\1\122\12\107\1\123\3\107\1\110\1\107\1\105"+
    "\1\124\1\125\2\107\63\126\1\127\1\126\1\130\2\126"+
    "\63\131\1\132\1\133\3\131\71\0\3\14\70\0\1\134"+
    "\1\135\70\0\2\16\17\0\1\16\2\0\31\16\3\0"+
    "\2\16\7\0\1\136\21\0\1\137\3\0\1\140\10\0"+
    "\1\141\6\0\1\136\1\0\1\141\1\140\1\136\17\0"+
    "\1\142\75\0\1\143\115\0\1\144\31\0\1\145\35\0"+
    "\1\144\7\0\1\146\3\0\1\145\14\0\2\16\17\0"+
    "\1\16\2\0\1\16\1\147\27\16\3\0\2\16\6\0"+
    "\2\16\17\0\1\16\2\0\5\16\1\150\23\16\3\0"+
    "\2\16\6\0\2\16\17\0\1\16\2\0\2\16\1\151"+
    "\2\16\1\152\23\16\3\0\2\16\7\0\1\136\21\0"+
    "\1\137\3\0\1\140\5\0\1\153\2\0\1\141\5\0"+
    "\1\154\1\136\1\0\1\141\1\140\1\136\72\0\1\155"+
    "\11\0\2\36\17\0\1\36\2\0\31\36\3\0\2\36"+
    "\17\0\1\156\56\0\2\36\17\0\1\36\2\0\2\36"+
    "\1\157\26\36\3\0\2\36\64\0\1\160\11\0\2\44"+
    "\17\0\1\44\2\0\31\44\3\0\2\44\7\0\1\161"+
    "\21\0\1\162\3\0\1\163\10\0\1\164\6\0\1\161"+
    "\1\0\1\164\1\163\1\161\17\0\1\165\123\0\1\166"+
    "\31\0\1\167\35\0\1\166\7\0\1\170\3\0\1\167"+
    "\14\0\2\44\17\0\1\44\2\0\1\44\1\171\27\44"+
    "\3\0\2\44\6\0\2\44\17\0\1\44\2\0\5\44"+
    "\1\172\23\44\3\0\2\44\6\0\2\44\17\0\1\44"+
    "\2\0\2\44\1\173\2\44\1\174\23\44\3\0\2\44"+
    "\7\0\1\161\21\0\1\162\3\0\1\163\5\0\1\153"+
    "\2\0\1\164\5\0\1\175\1\161\1\0\1\164\1\163"+
    "\1\161\72\0\1\176\3\0\1\61\3\0\13\61\1\0"+
    "\43\61\3\0\3\61\3\0\3\61\1\177\7\61\1\0"+
    "\35\61\1\177\3\61\1\177\1\61\3\0\2\61\64\0"+
    "\1\200\23\0\1\66\24\0\1\144\31\0\1\145\11\0"+
    "\1\66\23\0\1\144\7\0\1\146\3\0\1\145\31\0"+
    "\1\66\70\0\1\66\70\0\1\66\70\0\1\66\72\0"+
    "\1\66\42\0\1\100\2\0\1\100\10\0\1\100\1\0"+
    "\1\201\7\0\31\100\3\0\2\100\4\0\1\100\2\0"+
    "\1\202\10\0\1\100\1\0\1\201\6\0\1\137\3\100"+
    "\1\203\10\100\1\204\6\100\1\202\1\100\1\204\1\203"+
    "\1\202\1\100\3\0\2\100\12\0\1\205\61\0\1\100"+
    "\1\0\1\16\1\103\10\0\1\100\1\0\1\201\4\0"+
    "\1\16\2\0\31\103\3\0\2\103\4\0\1\100\1\0"+
    "\1\16\1\103\10\0\1\100\1\0\1\201\4\0\1\16"+
    "\2\0\2\103\1\206\26\103\3\0\2\103\64\207\1\210"+
    "\4\207\3\106\60\207\1\210\11\207\2\107\17\207\1\107"+
    "\2\207\31\107\1\207\1\210\1\207\2\107\7\207\1\211"+
    "\21\207\1\212\3\207\1\213\10\207\1\214\6\207\1\211"+
    "\1\207\1\214\1\213\1\211\2\207\1\210\14\207\1\215"+
    "\52\207\1\210\22\207\1\216\44\207\1\210\50\207\1\217"+
    "\16\207\1\210\12\207\1\220\35\207\1\217\7\207\1\221"+
    "\3\207\1\220\2\207\1\210\11\207\2\107\17\207\1\107"+
    "\2\207\1\107\1\222\27\107\1\207\1\210\1\207\2\107"+
    "\6\207\2\107\17\207\1\107\2\207\5\107\1\223\23\107"+
    "\1\207\1\210\1\207\2\107\6\207\2\107\17\207\1\107"+
    "\2\207\2\107\1\224\2\107\1\225\23\107\1\207\1\210"+
    "\1\207\2\107\7\207\1\211\21\207\1\212\3\207\1\213"+
    "\5\207\1\226\2\207\1\214\5\207\1\227\1\211\1\207"+
    "\1\214\1\213\1\211\2\207\1\210\67\207\1\230\3\207"+
    "\63\126\1\127\1\126\1\0\65\126\1\127\4\126\63\131"+
    "\1\132\1\0\66\131\1\132\4\131\1\134\1\231\1\232"+
    "\65\134\5\233\1\234\62\233\7\0\1\235\21\0\1\137"+
    "\3\0\1\140\10\0\1\141\6\0\1\235\1\0\1\141"+
    "\1\140\1\235\15\0\1\236\10\0\2\236\13\0\1\140"+
    "\10\0\1\140\6\0\1\236\1\0\2\140\1\236\15\0"+
    "\1\237\10\0\2\240\33\0\1\237\3\0\1\237\15\0"+
    "\1\236\10\0\2\241\13\0\1\140\10\0\1\140\6\0"+
    "\1\236\1\0\2\140\1\236\50\0\1\242\34\0\1\145"+
    "\21\0\1\137\3\0\1\140\10\0\1\141\6\0\1\145"+
    "\1\0\1\141\1\140\1\145\15\0\1\145\21\0\1\137"+
    "\3\0\1\140\10\0\1\141\5\0\1\154\1\145\1\0"+
    "\1\141\1\140\1\145\14\0\2\16\17\0\1\16\2\0"+
    "\2\16\1\243\26\16\3\0\2\16\6\0\2\16\17\0"+
    "\1\16\2\0\6\16\1\244\22\16\3\0\2\16\6\0"+
    "\2\16\17\0\1\16\2\0\6\16\1\245\22\16\3\0"+
    "\2\16\6\0\2\16\17\0\1\16\2\0\10\16\1\246"+
    "\20\16\3\0\2\16\55\0\1\247\3\0\1\247\15\0"+
    "\1\250\25\0\3\250\3\0\1\250\2\0\2\250\5\0"+
    "\5\250\72\0\1\251\11\0\2\36\17\0\1\36\2\0"+
    "\6\36\1\252\22\36\3\0\2\36\64\0\1\253\12\0"+
    "\1\254\21\0\1\162\3\0\1\163\10\0\1\164\6\0"+
    "\1\254\1\0\1\164\1\163\1\254\15\0\1\255\10\0"+
    "\2\255\13\0\1\163\10\0\1\163\6\0\1\255\1\0"+
    "\2\163\1\255\15\0\1\256\10\0\2\257\33\0\1\256"+
    "\3\0\1\256\15\0\1\255\10\0\2\260\13\0\1\163"+
    "\10\0\1\163\6\0\1\255\1\0\2\163\1\255\50\0"+
    "\1\261\34\0\1\167\21\0\1\162\3\0\1\163\10\0"+
    "\1\164\6\0\1\167\1\0\1\164\1\163\1\167\15\0"+
    "\1\167\21\0\1\162\3\0\1\163\10\0\1\164\5\0"+
    "\1\175\1\167\1\0\1\164\1\163\1\167\14\0\2\44"+
    "\17\0\1\44\2\0\2\44\1\262\26\44\3\0\2\44"+
    "\6\0\2\44\17\0\1\44\2\0\6\44\1\263\22\44"+
    "\3\0\2\44\6\0\2\44\17\0\1\44\2\0\6\44"+
    "\1\264\22\44\3\0\2\44\6\0\2\44\17\0\1\44"+
    "\2\0\10\44\1\265\20\44\3\0\2\44\7\0\1\266"+
    "\25\0\3\266\3\0\1\266\2\0\2\266\5\0\5\266"+
    "\72\0\1\267\3\0\1\61\3\0\3\61\1\270\7\61"+
    "\1\0\35\61\1\270\3\61\1\270\1\61\3\0\2\61"+
    "\64\0\1\271\25\0\1\201\51\0\1\100\2\0\1\272"+
    "\10\0\1\100\1\0\1\201\6\0\1\137\3\100\1\203"+
    "\10\100\1\204\6\100\1\272\1\100\1\204\1\203\1\272"+
    "\1\100\3\0\2\100\4\0\1\100\2\0\1\100\10\0"+
    "\1\273\1\240\1\201\7\0\31\100\3\0\2\100\4\0"+
    "\1\100\2\0\1\274\10\0\1\275\1\241\1\201\7\0"+
    "\3\100\1\203\10\100\1\203\6\100\1\274\1\100\2\203"+
    "\1\274\1\100\3\0\2\100\4\0\1\100\1\0\1\16"+
    "\1\103\10\0\1\100\1\0\1\201\4\0\1\16\2\0"+
    "\6\103\1\276\22\103\3\0\2\103\64\207\1\277\12\207"+
    "\1\300\21\207\1\212\3\207\1\213\10\207\1\214\6\207"+
    "\1\300\1\207\1\214\1\213\1\300\2\207\1\210\12\207"+
    "\1\301\10\207\2\301\13\207\1\213\10\207\1\213\6\207"+
    "\1\301\1\207\2\213\1\301\2\207\1\210\12\207\1\302"+
    "\10\207\2\303\33\207\1\302\3\207\1\302\2\207\1\210"+
    "\12\207\1\301\10\207\2\304\13\207\1\213\10\207\1\213"+
    "\6\207\1\301\1\207\2\213\1\301\2\207\1\210\45\207"+
    "\1\305\21\207\1\210\12\207\1\220\21\207\1\212\3\207"+
    "\1\213\10\207\1\214\6\207\1\220\1\207\1\214\1\213"+
    "\1\220\2\207\1\210\12\207\1\220\21\207\1\212\3\207"+
    "\1\213\10\207\1\214\5\207\1\227\1\220\1\207\1\214"+
    "\1\213\1\220\2\207\1\210\11\207\2\107\17\207\1\107"+
    "\2\207\2\107\1\306\26\107\1\207\1\210\1\207\2\107"+
    "\6\207\2\107\17\207\1\107\2\207\6\107\1\307\22\107"+
    "\1\207\1\210\1\207\2\107\6\207\2\107\17\207\1\107"+
    "\2\207\6\107\1\310\22\107\1\207\1\210\1\207\2\107"+
    "\6\207\2\107\17\207\1\107\2\207\10\107\1\311\20\107"+
    "\1\207\1\210\1\207\2\107\55\207\1\312\3\207\1\312"+
    "\2\207\1\210\12\207\1\313\25\207\3\313\3\207\1\313"+
    "\2\207\2\313\5\207\5\313\2\207\1\210\67\207\1\314"+
    "\3\207\2\0\1\232\65\0\5\233\1\315\66\233\1\316"+
    "\1\315\62\233\7\0\1\317\21\0\1\137\3\0\1\140"+
    "\10\0\1\141\6\0\1\317\1\0\1\141\1\140\1\317"+
    "\15\0\1\236\25\0\1\140\10\0\1\140\6\0\1\236"+
    "\1\0\2\140\1\236\15\0\1\237\45\0\1\237\3\0"+
    "\1\237\15\0\1\237\11\0\1\320\33\0\1\237\3\0"+
    "\1\237\15\0\1\236\11\0\1\320\13\0\1\140\10\0"+
    "\1\140\6\0\1\236\1\0\2\140\1\236\44\0\1\321"+
    "\37\0\2\16\17\0\1\16\2\0\3\16\1\322\25\16"+
    "\3\0\2\16\6\0\2\16\17\0\1\16\2\0\7\16"+
    "\1\243\21\16\3\0\2\16\6\0\2\16\17\0\1\16"+
    "\2\0\6\16\1\323\22\16\3\0\2\16\6\0\2\36"+
    "\17\0\1\36\2\0\6\36\1\324\22\36\3\0\2\36"+
    "\7\0\1\325\21\0\1\162\3\0\1\163\10\0\1\164"+
    "\6\0\1\325\1\0\1\164\1\163\1\325\15\0\1\255"+
    "\25\0\1\163\10\0\1\163\6\0\1\255\1\0\2\163"+
    "\1\255\15\0\1\256\45\0\1\256\3\0\1\256\15\0"+
    "\1\256\11\0\1\326\33\0\1\256\3\0\1\256\15\0"+
    "\1\255\11\0\1\326\13\0\1\163\10\0\1\163\6\0"+
    "\1\255\1\0\2\163\1\255\44\0\1\327\37\0\2\44"+
    "\17\0\1\44\2\0\3\44\1\330\25\44\3\0\2\44"+
    "\6\0\2\44\17\0\1\44\2\0\7\44\1\262\21\44"+
    "\3\0\2\44\6\0\2\44\17\0\1\44\2\0\6\44"+
    "\1\331\22\44\3\0\2\44\1\61\3\0\3\61\1\332"+
    "\7\61\1\0\35\61\1\332\3\61\1\332\1\61\3\0"+
    "\2\61\4\0\1\100\2\0\1\333\10\0\1\100\1\0"+
    "\1\201\6\0\1\137\3\100\1\203\10\100\1\204\6\100"+
    "\1\333\1\100\1\204\1\203\1\333\1\100\3\0\2\100"+
    "\4\0\1\100\2\0\1\100\10\0\1\100\1\320\1\201"+
    "\7\0\31\100\3\0\2\100\4\0\1\100\2\0\1\274"+
    "\10\0\1\100\1\0\1\201\7\0\3\100\1\203\10\100"+
    "\1\203\6\100\1\274\1\100\2\203\1\274\1\100\3\0"+
    "\2\100\4\0\1\100\2\0\1\274\10\0\1\100\1\320"+
    "\1\201\7\0\3\100\1\203\10\100\1\203\6\100\1\274"+
    "\1\100\2\203\1\274\1\100\3\0\2\100\4\0\1\100"+
    "\1\0\1\16\1\103\10\0\1\100\1\0\1\201\4\0"+
    "\1\16\2\0\6\103\1\334\22\103\3\0\2\103\64\207"+
    "\1\335\12\207\1\336\21\207\1\212\3\207\1\213\10\207"+
    "\1\214\6\207\1\336\1\207\1\214\1\213\1\336\2\207"+
    "\1\210\12\207\1\301\25\207\1\213\10\207\1\213\6\207"+
    "\1\301\1\207\2\213\1\301\2\207\1\210\12\207\1\302"+
    "\45\207\1\302\3\207\1\302\2\207\1\210\12\207\1\302"+
    "\11\207\1\337\33\207\1\302\3\207\1\302\2\207\1\210"+
    "\12\207\1\301\11\207\1\337\13\207\1\213\10\207\1\213"+
    "\6\207\1\301\1\207\2\213\1\301\2\207\1\210\41\207"+
    "\1\340\25\207\1\210\11\207\2\107\17\207\1\107\2\207"+
    "\3\107\1\341\25\107\1\207\1\210\1\207\2\107\6\207"+
    "\2\107\17\207\1\107\2\207\7\107\1\306\21\107\1\207"+
    "\1\210\1\207\2\107\6\207\2\107\17\207\1\107\2\207"+
    "\6\107\1\342\22\107\1\207\1\210\1\207\2\107\64\0"+
    "\1\343\3\0\4\233\1\232\1\315\62\233\7\0\1\145"+
    "\11\0\1\344\7\0\1\137\3\0\1\140\10\0\1\141"+
    "\6\0\1\145\1\0\1\141\1\140\1\145\4\0\1\345"+
    "\7\0\2\16\17\0\1\16\1\0\1\346\31\16\3\0"+
    "\2\16\6\0\2\36\17\0\1\36\1\0\1\346\31\36"+
    "\3\0\2\36\7\0\1\167\11\0\1\347\7\0\1\162"+
    "\3\0\1\163\10\0\1\164\6\0\1\167\1\0\1\164"+
    "\1\163\1\167\4\0\1\350\7\0\2\44\17\0\1\44"+
    "\1\0\1\351\31\44\3\0\2\44\1\61\3\0\13\61"+
    "\1\0\1\61\1\352\41\61\3\0\1\353\1\61\4\0"+
    "\1\100\2\0\1\354\10\0\1\100\1\344\1\201\6\0"+
    "\1\137\3\100\1\203\10\100\1\204\6\100\1\354\1\100"+
    "\1\204\1\203\1\354\1\100\3\0\1\355\1\100\4\0"+
    "\1\100\1\0\1\16\1\103\10\0\1\100\1\0\1\201"+
    "\4\0\1\16\1\0\1\346\31\103\3\0\2\103\7\207"+
    "\1\220\11\207\1\356\7\207\1\212\3\207\1\213\10\207"+
    "\1\214\6\207\1\220\1\207\1\214\1\213\1\220\2\207"+
    "\1\210\1\207\1\357\7\207\2\107\17\207\1\107\1\207"+
    "\1\360\31\107\1\207\1\210\1\207\2\107\64\0\1\361"+
    "\12\0\1\362\45\0\1\362\3\0\1\362\15\0\1\363"+
    "\45\0\1\363\3\0\1\363\40\0\1\364\3\0\1\365"+
    "\1\0\1\366\1\367\1\370\1\371\1\0\1\372\1\373"+
    "\1\374\27\0\1\375\45\0\1\375\3\0\1\375\15\0"+
    "\1\376\45\0\1\376\3\0\1\376\40\0\1\377\3\0"+
    "\1\u0100\1\0\1\u0101\1\u0102\1\u0103\1\u0104\1\0\1\u0105"+
    "\1\u0106\1\u0107\20\0\1\61\3\0\3\61\1\u0108\7\61"+
    "\1\0\35\61\1\u0108\3\61\1\u0108\1\61\3\0\3\61"+
    "\3\0\3\61\1\u0109\7\61\1\0\35\61\1\u0109\3\61"+
    "\1\u0109\1\61\3\0\2\61\4\0\1\100\2\0\1\354"+
    "\10\0\1\100\1\0\1\201\6\0\1\137\3\100\1\203"+
    "\10\100\1\204\6\100\1\354\1\100\1\204\1\203\1\354"+
    "\1\100\3\0\2\100\4\0\1\100\2\0\1\u010a\10\0"+
    "\1\100\1\0\1\201\7\0\23\100\1\u010a\3\100\1\u010a"+
    "\1\100\3\0\2\100\7\207\1\u010b\45\207\1\u010b\3\207"+
    "\1\u010b\2\207\1\210\12\207\1\u010c\45\207\1\u010c\3\207"+
    "\1\u010c\2\207\1\210\35\207\1\u010d\3\207\1\u010e\1\207"+
    "\1\u010f\1\u0110\1\u0111\1\u0112\1\207\1\u0113\1\u0114\1\u0115"+
    "\14\207\1\210\3\207\7\0\1\u0116\45\0\1\u0116\3\0"+
    "\1\u0116\15\0\1\u0117\45\0\1\u0117\3\0\1\u0117\53\0"+
    "\1\u0118\62\0\1\u0119\74\0\1\u011a\54\0\1\u011b\2\0"+
    "\1\u011c\15\0\1\u011d\50\0\1\u011e\73\0\1\u011f\3\0"+
    "\1\u0120\65\0\1\u0121\62\0\1\u0122\72\0\1\u011f\36\0"+
    "\1\u0123\45\0\1\u0123\3\0\1\u0123\15\0\1\u0124\45\0"+
    "\1\u0124\3\0\1\u0124\53\0\1\u0125\62\0\1\u0126\74\0"+
    "\1\u0127\54\0\1\u0128\2\0\1\u0129\15\0\1\u012a\50\0"+
    "\1\u012b\73\0\1\u012c\3\0\1\u012d\65\0\1\u012e\62\0"+
    "\1\u012f\72\0\1\u012c\27\0\1\61\3\0\3\61\1\u0130"+
    "\7\61\1\0\35\61\1\u0130\3\61\1\u0130\1\61\3\0"+
    "\3\61\3\0\3\61\1\u0131\7\61\1\0\35\61\1\u0131"+
    "\3\61\1\u0131\1\61\3\0\2\61\4\0\1\100\2\0"+
    "\1\u0132\10\0\1\100\1\0\1\201\7\0\23\100\1\u0132"+
    "\3\100\1\u0132\1\100\3\0\2\100\7\207\1\u0133\45\207"+
    "\1\u0133\3\207\1\u0133\2\207\1\210\12\207\1\u0134\45\207"+
    "\1\u0134\3\207\1\u0134\2\207\1\210\50\207\1\u0135\16\207"+
    "\1\210\43\207\1\u0136\23\207\1\210\50\207\1\u0137\16\207"+
    "\1\210\35\207\1\u0138\2\207\1\u0139\15\207\1\u013a\10\207"+
    "\1\210\37\207\1\u013b\27\207\1\210\43\207\1\u013c\3\207"+
    "\1\u013d\17\207\1\210\45\207\1\u013e\21\207\1\210\40\207"+
    "\1\u013f\26\207\1\210\43\207\1\u013c\23\207\1\210\3\207"+
    "\21\0\1\u0140\44\0\1\345\20\0\1\u0141\120\0\1\u0142"+
    "\63\0\1\u0143\64\0\1\u0121\61\0\1\u0144\110\0\1\u0145"+
    "\63\0\1\u0146\57\0\1\u0147\73\0\1\u0148\67\0\1\u0147"+
    "\55\0\1\u0149\104\0\1\u014a\41\0\1\u014b\44\0\1\350"+
    "\20\0\1\u014c\120\0\1\u014d\63\0\1\u014e\64\0\1\u012e"+
    "\61\0\1\u014f\110\0\1\u0150\63\0\1\u0151\57\0\1\u0152"+
    "\73\0\1\u0153\67\0\1\u0152\55\0\1\u0154\104\0\1\u0155"+
    "\20\0\1\61\3\0\13\61\1\0\1\61\1\u0156\41\61"+
    "\3\0\1\353\2\61\3\0\13\61\1\u0141\43\61\3\0"+
    "\2\61\4\0\1\100\2\0\1\100\7\0\1\u0141\1\100"+
    "\1\0\1\201\7\0\31\100\3\0\2\100\21\207\1\u0157"+
    "\42\207\1\210\1\207\1\357\20\207\1\u0158\44\207\1\210"+
    "\53\207\1\u0159\13\207\1\210\47\207\1\u015a\17\207\1\210"+
    "\44\207\1\u013e\22\207\1\210\36\207\1\u015b\30\207\1\210"+
    "\57\207\1\u015c\7\207\1\210\53\207\1\u015d\13\207\1\210"+
    "\43\207\1\u015e\23\207\1\210\47\207\1\u015f\17\207\1\210"+
    "\47\207\1\u015e\17\207\1\210\35\207\1\u0160\31\207\1\210"+
    "\52\207\1\u0161\14\207\1\210\3\207\7\0\1\u0162\45\0"+
    "\1\u0162\3\0\1\u0162\15\0\1\u0163\45\0\1\u0163\3\0"+
    "\1\u0163\43\0\1\u0164\71\0\1\u0121\64\0\1\u0165\10\0"+
    "\1\u0166\73\0\1\u0149\61\0\1\u0120\64\0\1\u0149\72\0"+
    "\1\u0149\71\0\1\u0167\31\0\1\u0168\45\0\1\u0168\3\0"+
    "\1\u0168\15\0\1\u0169\45\0\1\u0169\3\0\1\u0169\43\0"+
    "\1\u016a\71\0\1\u012e\64\0\1\u016b\10\0\1\u016c\73\0"+
    "\1\u0154\61\0\1\u012d\64\0\1\u0154\72\0\1\u0154\71\0"+
    "\1\u016d\22\0\1\61\3\0\3\61\1\u016e\7\61\1\0"+
    "\35\61\1\u016e\3\61\1\u016e\1\61\3\0\2\61\7\207"+
    "\1\u016f\45\207\1\u016f\3\207\1\u016f\2\207\1\210\12\207"+
    "\1\u0170\45\207\1\u0170\3\207\1\u0170\2\207\1\210\40\207"+
    "\1\u0171\26\207\1\210\42\207\1\u013e\24\207\1\210\37\207"+
    "\1\u0172\10\207\1\u0173\16\207\1\210\54\207\1\u0160\12\207"+
    "\1\210\46\207\1\u013d\20\207\1\210\43\207\1\u0160\23\207"+
    "\1\210\46\207\1\u0160\20\207\1\210\50\207\1\u0174\16\207"+
    "\1\210\3\207\7\0\1\u0175\45\0\1\u0175\3\0\1\u0175"+
    "\15\0\1\u0176\45\0\1\u0176\3\0\1\u0176\47\0\1\u0177"+
    "\75\0\1\u0121\62\0\1\u0178\75\0\1\u0179\26\0\1\u017a"+
    "\45\0\1\u017a\3\0\1\u017a\15\0\1\u017b\45\0\1\u017b"+
    "\3\0\1\u017b\47\0\1\u017c\75\0\1\u012e\62\0\1\u017d"+
    "\75\0\1\u017e\17\0\1\61\3\0\3\61\1\u017f\7\61"+
    "\1\0\35\61\1\u017f\3\61\1\u017f\1\61\3\0\2\61"+
    "\7\207\1\u0180\45\207\1\u0180\3\207\1\u0180\2\207\1\210"+
    "\12\207\1\u0181\45\207\1\u0181\3\207\1\u0181\2\207\1\210"+
    "\44\207\1\u0182\22\207\1\210\52\207\1\u013e\14\207\1\210"+
    "\45\207\1\u0183\21\207\1\210\53\207\1\u0184\13\207\1\210"+
    "\3\207\7\0\1\363\45\0\1\363\3\0\1\363\4\0"+
    "\1\345\20\0\1\u0185\2\u0186\45\0\1\u0187\32\0\1\u0188"+
    "\107\0\1\u0149\54\0\1\u0147\37\0\1\376\45\0\1\376"+
    "\3\0\1\376\4\0\1\350\20\0\1\u0189\2\u018a\45\0"+
    "\1\u018b\32\0\1\u018c\107\0\1\u0154\54\0\1\u0152\30\0"+
    "\1\61\3\0\3\61\1\u0109\7\61\1\0\35\61\1\u0109"+
    "\3\61\1\u0109\1\61\3\0\1\353\1\61\7\207\1\u010c"+
    "\45\207\1\u010c\3\207\1\u010c\2\207\1\210\1\207\1\357"+
    "\20\207\1\u018d\2\u018e\42\207\1\210\2\207\1\u018f\32\207"+
    "\1\u0190\31\207\1\210\55\207\1\u0160\11\207\1\210\42\207"+
    "\1\u015e\24\207\1\210\3\207\7\0\1\u0191\45\0\1\u0191"+
    "\3\0\1\u0191\15\0\1\u0192\45\0\1\u0192\3\0\1\u0192"+
    "\45\0\1\u0193\37\0\1\u0194\45\0\1\u0194\3\0\1\u0194"+
    "\15\0\1\u0195\45\0\1\u0195\3\0\1\u0195\45\0\1\u0196"+
    "\30\0\7\207\1\u0197\45\207\1\u0197\3\207\1\u0197\2\207"+
    "\1\210\12\207\1\u0198\45\207\1\u0198\3\207\1\u0198\2\207"+
    "\1\210\42\207\1\u0199\24\207\1\210\3\207\7\0\1\u019a"+
    "\45\0\1\u019a\3\0\1\u019a\15\0\1\u019b\45\0\1\u019b"+
    "\3\0\1\u019b\56\0\1\u0145\26\0\1\u019c\45\0\1\u019c"+
    "\3\0\1\u019c\15\0\1\u019d\45\0\1\u019d\3\0\1\u019d"+
    "\56\0\1\u0150\17\0\7\207\1\u019e\45\207\1\u019e\3\207"+
    "\1\u019e\2\207\1\210\12\207\1\u019f\45\207\1\u019f\3\207"+
    "\1\u019f\2\207\1\210\53\207\1\u015c\13\207\1\210\3\207"+
    "\20\0\2\u0186\7\0\1\u01a0\35\0\1\u0187\17\0\1\u01a1"+
    "\70\0\2\u018a\7\0\1\u01a2\35\0\1\u018b\17\0\1\u01a3"+
    "\50\0\20\207\2\u018e\7\207\1\u01a4\32\207\1\210\2\207"+
    "\1\u018f\17\207\1\u01a5\44\207\1\210\3\207\7\0\1\u01a6"+
    "\45\0\1\u01a6\3\0\1\u01a6\15\0\1\u01a7\45\0\1\u01a7"+
    "\3\0\1\u01a7\15\0\1\u01a8\45\0\1\u01a8\3\0\1\u01a8"+
    "\15\0\1\u01a9\45\0\1\u01a9\3\0\1\u01a9\6\0\7\207"+
    "\1\u01aa\45\207\1\u01aa\3\207\1\u01aa\2\207\1\210\12\207"+
    "\1\u01ab\45\207\1\u01ab\3\207\1\u01ab\2\207\1\210\3\207"+
    "\7\0\1\u01a6\10\0\2\u0186\33\0\1\u01a6\3\0\1\u01a6"+
    "\5\0\1\u0187\7\0\1\u0187\45\0\1\u0187\3\0\1\u0187"+
    "\15\0\1\u01a8\10\0\2\u018a\33\0\1\u01a8\3\0\1\u01a8"+
    "\5\0\1\u018b\7\0\1\u018b\45\0\1\u018b\3\0\1\u018b"+
    "\6\0\7\207\1\u01aa\10\207\2\u018e\33\207\1\u01aa\3\207"+
    "\1\u01aa\2\207\1\210\2\207\1\u018f\7\207\1\u018f\45\207"+
    "\1\u018f\3\207\1\u018f\2\207\1\210\3\207";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\4\1\1\11\1\1\2\11\10\1\2\11"+
    "\1\1\1\11\3\1\1\11\3\1\2\11\7\1\1\11"+
    "\3\1\1\11\1\1\2\11\40\1\1\11\4\1\1\0"+
    "\2\1\1\0\1\1\2\11\1\0\6\1\3\0\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\1\0\6\1"+
    "\2\0\1\1\1\0\4\1\1\11\1\1\2\0\2\1"+
    "\1\0\3\1\1\0\6\1\3\0\1\1\1\11\2\0"+
    "\3\1\1\0\1\1\1\0\6\1\1\11\1\1\1\11"+
    "\3\1\1\0\1\1\1\0\5\1\1\11\1\1\1\11"+
    "\5\1\1\0\3\1\1\0\1\1\1\0\7\1\1\0"+
    "\2\1\1\0\1\11\4\1\1\0\1\11\7\1\1\0"+
    "\4\1\1\0\1\1\2\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\11\26\0\3\1\45\0\3\1\26\0"+
    "\1\11\12\0\1\11\1\0\1\1\11\0\1\1\15\0"+
    "\1\1\6\0\2\1\3\0\2\1\3\0\3\1\5\0"+
    "\1\11\3\0\1\11\3\0\1\1\12\0\1\1\1\0"+
    "\1\1\1\0\1\1\7\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private java.util.Stack<Integer> _zzStateStack = new java.util.Stack<Integer>();


  public IonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return IonTypes.COMMA;
          }
        case 56: break;
        case 26: 
          { return IonTypes.OPERATOR;
          }
        case 57: break;
        case 20: 
          { yybegin(ION_LIST); return IonTypes.LBRACKET;
          }
        case 58: break;
        case 52: 
          { yybegin(_zzStateStack.pop()); return IonTypes.NULL;
          }
        case 59: break;
        case 9: 
          { _zzStateStack.push(yystate()); yybegin(READ_Q_STR); return IonTypes.Q_START;
          }
        case 60: break;
        case 53: 
          { yypushback(3); return IonTypes.QQQ_VALUE;
          }
        case 61: break;
        case 39: 
          { yybegin(READ_LOB); return IonTypes.LOB_START;
          }
        case 62: break;
        case 21: 
          { yybegin(S_EXP); return IonTypes.LPAREN;
          }
        case 63: break;
        case 54: 
          { return IonTypes.TIMESTAMP;
          }
        case 64: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 65: break;
        case 34: 
          { return IonTypes.DECIMAL;
          }
        case 66: break;
        case 11: 
          { yybegin(_zzStateStack.pop()); return IonTypes.RBRACKET;
          }
        case 67: break;
        case 37: 
          { _zzStateStack.push(yystate()); yybegin(READ_VALUE); return IonTypes.ANNOTATION_SEPARATOR;
          }
        case 68: break;
        case 19: 
          { yybegin(ION_STRUCT); return IonTypes.LBRACE;
          }
        case 69: break;
        case 12: 
          { return IonTypes.KEY_NAME;
          }
        case 70: break;
        case 29: 
          { return IonTypes.QQ_VALUE;
          }
        case 71: break;
        case 22: 
          { yybegin(READ_Q_STR); return IonTypes.Q_START;
          }
        case 72: break;
        case 55: 
          { yybegin(_zzStateStack.pop()); return IonTypes.TIMESTAMP;
          }
        case 73: break;
        case 16: 
          { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QQUOTE;
          }
        case 74: break;
        case 8: 
          { _zzStateStack.push(yystate()); yybegin(S_EXP); return IonTypes.LPAREN;
          }
        case 75: break;
        case 3: 
          { return IonTypes.IDENTIFIER;
          }
        case 76: break;
        case 47: 
          { yybegin(_zzStateStack.pop()); return IonTypes.QQQUOTE;
          }
        case 77: break;
        case 43: 
          { _zzStateStack.push(yystate()); yybegin(READ_QQQ_STR); return IonTypes.QQQ_START;
          }
        case 78: break;
        case 10: 
          { _zzStateStack.push(yystate()); yybegin(READ_QQ_STR); return IonTypes.QQ_START;
          }
        case 79: break;
        case 40: 
          { yybegin(_zzStateStack.pop()); return IonTypes.LOB_END;
          }
        case 80: break;
        case 49: 
          { return IonTypes.BOOLEAN;
          }
        case 81: break;
        case 17: 
          { yybegin(_zzStateStack.pop()); return IonTypes.IDENTIFIER;
          }
        case 82: break;
        case 38: 
          { yybegin(_zzStateStack.pop()); return IonTypes.DECIMAL;
          }
        case 83: break;
        case 7: 
          { _zzStateStack.push(yystate()); yybegin(ION_LIST); return IonTypes.LBRACKET;
          }
        case 84: break;
        case 4: 
          { return IonTypes.INTEGER;
          }
        case 85: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 86: break;
        case 48: 
          { yybegin(_zzStateStack.pop()); return IonTypes.QQQ_END;
          }
        case 87: break;
        case 41: 
          { return IonTypes.BININT;
          }
        case 88: break;
        case 44: 
          { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QQQUOTE;
          }
        case 89: break;
        case 27: 
          { yybegin(_zzStateStack.pop()); return IonTypes.RPAREN;
          }
        case 90: break;
        case 25: 
          { yybegin(_zzStateStack.pop()); return IonTypes.QQUOTE;
          }
        case 91: break;
        case 28: 
          { return (isValidBase64(yytext())) ? IonTypes.BLOB_VALUE : TokenType.BAD_CHARACTER;
          }
        case 92: break;
        case 46: 
          { yybegin(READ_QQQ_STR); return IonTypes.QQQ_START;
          }
        case 93: break;
        case 24: 
          { yybegin(_zzStateStack.pop()); return IonTypes.QUOTE;
          }
        case 94: break;
        case 23: 
          { yybegin(READ_QQ_STR); return IonTypes.QQ_START;
          }
        case 95: break;
        case 6: 
          { _zzStateStack.push(yystate()); yybegin(ION_STRUCT); return IonTypes.LBRACE;
          }
        case 96: break;
        case 36: 
          { return IonTypes.ANNOTATION_SEPARATOR;
          }
        case 97: break;
        case 33: 
          { return IonTypes.COMMENT;
          }
        case 98: break;
        case 30: 
          { yybegin(_zzStateStack.pop()); return IonTypes.QQ_END;
          }
        case 99: break;
        case 51: 
          { yybegin(_zzStateStack.pop()); return IonTypes.BOOLEAN;
          }
        case 100: break;
        case 42: 
          { return IonTypes.HEXINT;
          }
        case 101: break;
        case 31: 
          { return IonTypes.Q_VALUE;
          }
        case 102: break;
        case 50: 
          { return IonTypes.NULL;
          }
        case 103: break;
        case 15: 
          { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QUOTE;
          }
        case 104: break;
        case 14: 
          { _zzStateStack.push(yystate()); yybegin(READ_VALUE); return IonTypes.SEPARATOR;
          }
        case 105: break;
        case 35: 
          { _zzStateStack.push(yystate()); yybegin(READ_LOB); return IonTypes.LOB_START;
          }
        case 106: break;
        case 32: 
          { yybegin(_zzStateStack.pop()); return IonTypes.Q_END;
          }
        case 107: break;
        case 45: 
          { yybegin(_zzStateStack.pop()); return IonTypes.HEXINT;
          }
        case 108: break;
        case 13: 
          { yybegin(_zzStateStack.pop()); return IonTypes.RBRACE;
          }
        case 109: break;
        case 18: 
          { yybegin(_zzStateStack.pop()); return IonTypes.INTEGER;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
